import generator.config.ConfigGenerator;
import generator.config.MySQLConfigGenerator;
import generator.config.PGConfigGenerator;
import generator.sql.MySQLGenerator;
import generator.sql.PGGenerator;
import generator.sql.SQLGenerator;
import context.schema.Column;
import context.TestUnitMetaData;

import java.lang.reflect.Method;
import java.lang.reflect.Parameter;
import java.util.List;
import java.util.Random;

public class ArgGenerator {
    private String id;
    private final Random r;
    private TestUnitMetaData testUnitMetaData;
    private final Main.Connector connector;
    private SQLGenerator sg;
    private ConfigGenerator cg;

    public Object[] generateRandomDriverArgs(Method method, String[] names) {
        String methodName = method.getName();
        Parameter[] params = method.getParameters();
        assert params.length == names.length;

        Object[] args = new Object[params.length];
        for (int i = 0; i < params.length; i++) {
            String paraName = names[i];
            Class<?> type = params[i].getType();
            if ("url".equals(paraName)) {
                String dbId = this.id.split("_")[0];
                // ng did not support config
                if (Main.connector1.equals(Main.Connector.NGPGSQL) || Main.connector2.equals(Main.Connector.NGPGSQL)) {
                    args[i] = String.format("jdbc:%s://%s:%s/%s?user=%s&password=%s",
                            connector.toString(), Main.host, Main.port, Main.database + dbId, Main.user, Main.password);
                } else if ("cg".equals(Main.oracle)) {
                    args[i] = String.format("jdbc:%s://%s:%s/%s?user=%s&password=%s%s%s",
                            connector.toString(), Main.host, Main.port, Main.database + dbId, Main.user, Main.password, this.testUnitMetaData.config, this.testUnitMetaData.configSetting);
                } else {
                    args[i] = String.format("jdbc:%s://%s:%s/%s?user=%s&password=%s%s",
                            connector.toString(), Main.host, Main.port, Main.database + dbId, Main.user, Main.password, cg.generateRandomUrlConfig());
                }
            } else {
                throw new IllegalArgumentException(methodName + " unknown parameter type: " + type + ", paraName: " + paraName);
            }
        }

        return args;
    }

    public Object[] generateRandomConnArgs(Method method, String[] names) {
        String methodName = method.getName();
        Parameter[] params = method.getParameters();
        assert params.length == names.length;

        Object[] args = new Object[params.length];
        for (int i = 0; i < params.length; i++) {
            Class<?> type = params[i].getType();
            String paraName = names[i];
            if ("sql".equals(paraName)) {
                if (methodName.endsWith("Statement")) {
                    args[i] = sg.generateRandomPreparedSql();
                }
            } else if ("savepoint".equals(paraName)) {
                    args[i] = this.testUnitMetaData.savepoint;
            } else if (type == int.class) {
                if (paraName.startsWith("result")) {
                    args[i] = cg.generateRandomResultConfig(paraName);
                } else if ("level".equals(paraName)) {
                    args[i] = cg.generateRandomTransactionConfig();
                } else {
                    args[i] = cg.generateSimpleDataConfig();
                }
            } else if (type == boolean.class) {
                args[i] = r.nextBoolean();
            } else {
                throw new IllegalArgumentException(methodName + " unknown parameter type: " + type + ", paraName: " + paraName);
            }
        }

        return args;
    }

    public Object[] generateRandomStmtArgs(Method method, String[] names) {
        String methodName = method.getName();
        Parameter[] params = method.getParameters();
        assert params.length == names.length;

        Object[] args = new Object[params.length];
        for (int i = 0; i < params.length; i++) {
            Class<?> type = params[i].getType();
            String paraName = names[i];
            if ("sql".equals(paraName)) {
                if ("execute".equals(methodName)) {
                    args[i] = sg.generateRandomSql();
                }
                else if ("executeQuery".equals(methodName)) {
                    args[i] = sg.generateRandomSelectSql();
                } else {
                    args[i] = sg.generateRandomUpdateSql();
                }
            } else if (type == int.class) {
                if ("autoGeneratedKeys".equals(paraName)) {
                    args[i] = cg.generateRandomGenerateKeyConfig();
                } else if ("setFetchDirection".equals(methodName)) {
                    args[i] = cg.generateRandomFetchConfig();
                } else if ("getMoreResults".equals(methodName)) {
                    args[i] = cg.generateMoreResultsConfig();
                } else {
                    args[i] = cg.generateSimpleDataConfig();
                }
            }  else if (type == boolean.class) {
                args[i] = r.nextBoolean();
            } else {
                throw new IllegalArgumentException(methodName + " unknown parameter type: " + type + ", paraName: " + paraName);
            }
        }

        return args;
    }

    public List<Object[]> generateRandomPreparedStmtArgs(Method method, String[] names) {
        String methodName = method.getName();
        Parameter[] params = method.getParameters();
        assert params.length == names.length;

        // generate all params
        if ("setObject".equals(methodName)) {
            return sg.generateRandomPreparedSqlValue();
        } else if (params.length == 0) {
            return null;
        } else {
            throw new IllegalArgumentException(methodName + " unknown parameter type: " + params[0].getType() + ", paraName: " + names[0]);
        }
    }

    public Object[] generateRandomResultArgs(Method method, String[] names) {
        String methodName = method.getName();
        Parameter[] params = method.getParameters();
        assert params.length == names.length;

        Object[] args = new Object[params.length];
        Column col = null;
        for (int i = 0; i < params.length; i++) {
            Class<?> type = params[i].getType();
            String paraName = names[i];
            if ("columnLabel".equals(paraName)) {
                col = this.testUnitMetaData.getRandomTableColumn(this.r);
                assert col != null;
                args[i] = col.getName();
            } else if ("columnIndex".equals(paraName)) {
                col = this.testUnitMetaData.getRandomTableColumn(this.r);
                if (col == null) {
                    args[i] = 1;
                } else {
                    args[i] = r.nextInt(1, col.getTable().getCols().size() + 1);
                }
            } else if ("x".equals(paraName)) {
                if (col != null) {
                    // update column
                    args[i] = sg.generateValueByType(col.getType());
                } else {
                    args[i] = cg.generateSimpleDataConfig();
                }
            } else if (type == int.class) {
                if ("setFetchDirection".equals(methodName)) {
                    args[i] = cg.generateRandomFetchConfig();
                } else {
                    args[i] = cg.generateSimpleDataConfig();
                }
            } else {
                throw new IllegalArgumentException(methodName + " unknown parameter type: " + params[i].getType() + ", paraName: " + names[i]);
            }
        }
        return args;
    }

    public ArgGenerator(Random r, TestUnitMetaData testUnitMetaData, Main.Connector connector, String id) {
        this.r = r;
        this.testUnitMetaData = testUnitMetaData;
        this.connector = connector;
        this.id = id;
        initGeneratorByConnector();
    }

    private void initGeneratorByConnector() {
        switch (connector) {
            case MYSQL:
            case MARIADB:
            case AWSMYSQL:
                this.sg = new MySQLGenerator(r, id, testUnitMetaData);
                this.cg = new MySQLConfigGenerator(r);
                break;
            case POSTGRESQL:
            case NGPGSQL:
            case AWSWRAPPER:
                this.sg = new PGGenerator(r, id, testUnitMetaData);
                this.cg = new PGConfigGenerator(r);
                break;
        }
    }

    public Object generateRandomBoolUrlConfig() {
        return this.cg.generateRandomBoolUrlConfig();
    }
}